# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:

  pull_request:


  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"; self hosted runner allow more control, versus GitHub hosted runners
  # https://docs.github.com/en/actions/hosting-your-own-runners/about-self-hosted-runners 
  hello-world:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run:  |
          echo Hello, world!
          echo $PATH;

  experimental-world:

    runs-on: ubuntu-latest

    steps:
      - name: environmental variables output
        run: |
          echo "added 030422 to try causing GitHub action on every push or PR to any branch"
          echo Add other actions to build,
          echo test, and deploy your project.
          echo "here is the path: " $PATH
          echo "now for the environmental variables";
          printenv 


  sonarqube-branch-scan:
      name: scan branch for sonarqube issues
      runs-on: self-hosted

      steps:
        - uses: actions/checkout@v2

        - name: Import Secrets for AWS
          uses: hashicorp/vault-action@v2.1.0
          with:
            url: https://vault.theatlastango.tools
            method: approle
            roleId: ${{ secrets.atlas_vault_role_Id }}
            secretId: ${{ secrets.atlas_vault_secret_Id }}
            secrets: |
              /apollo-jupiter-tango/atlas-kafka/atlas-pre/iris/tango-client-account-manager-user registry_endpoint | KAFKA_REGISTRY_SERVER ;
              /apollo-jupiter-tango/atlas-kafka/atlas-pre/iris/tango-client-account-manager-user registry_key | KAFKA_REGISTRY_USERNAME ;
              /apollo-jupiter-tango/atlas-kafka/atlas-pre/iris/tango-client-account-manager-user registry_secret | KAFKA_REGISTRY_PASSWORD ;
              /atlas/sonarqube sonarqube_server | SONARQUBE_SERVER  ;
              /atlas/sonarqube sonarqube_token | SONARQUBE_TOKEN ;
              /apollo-jupiter-tango/sonarqube/keys/tango-client-account-manager sonarqube_key | SONARQUBE_PROJECT_KEY;
          #      - name: Cache SonarQube packages
          #uses: actions/cache@v1
        #        with:
        #          path: ~/.sonar/cache
        #          key: ${{ runner.os }}-sonar
        #          restore-keys: ${{ runner.os }}-sonar
        #      - name: Cache Maven packages
        #        uses: actions/cache@v1
        #        with:
        #          path: ~/.m2
        #          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        #          restore-keys: ${{ runner.os }}-m2
        - name: Build and analyze
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
            SONAR_HOST_URL: sonarqube_server | SONARQUBE_SERVER;   #${{ secrets.SONAR_HOST_URL }}

          run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar
        #     echo ${{GITHUB_TOKEN}}
        #    echo ${{SONAR_TOKEN}}
        #    echo ${{SONAR_HOST_URL}}
            









